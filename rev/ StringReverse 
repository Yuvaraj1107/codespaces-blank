public class Queue {
    QueueNode front, rear;

    Queue() {
        this.front = null;
        this.rear = null;
    }
    
    // complete the below method
    void enqueue(int data) {
        // create a new node with data
       
        
        // check if the front and rear are equal to null
        QueueNode newQueueNode = new QueueNode(data);
        if (this.front == null && this.rear == null) {
            this.front = newQueueNode;
            this.rear = newQueueNode; 
            // if true, queue is empty
            // store the reference of newNode to the front and rear pointers
            
        } else {
             this.rear.next = newQueueNode;
            this.rear = newQueueNode;
            // else, queue is not empty
            // unalterred front
            // update the rear pointer alone
            // insert the newNode to the next of rear pointer
            
        }
    }

    int getFront() {
        return this.front.data;
    }

    int getRear() {
        return this.rear.data;
    }

    void dequeue() {
        if (this.front != null) {
            this.front = this.front.next;
        }
    }

    public static void main(String[] args) {
        // create an empty queue
        Queue queue = new Queue();

        queue.enqueue(10);
        queue.enqueue(11);
        queue.enqueue(12);
        System.out.println(queue.getFront() + " " + queue.getRear());
    }

}
